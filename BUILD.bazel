load("@bazel_skylib//rules:copy_file.bzl", "copy_file")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@aspect_bazel_lib//lib:expand_template.bzl", "expand_template")
load("@aspect_bazel_lib//lib:write_source_files.bzl", "write_source_files")
load("@io_bazel_rules_kotlin//src/main/starlark/core/repositories:versions.bzl", _kt_versions = "versions")
load("//src/bzl/copy_protos:copy_protos.bzl", "copy_protos")
load("//src/bzl/gradle_utils:gradle_utils.bzl", "parse_deps_for_gradle", "vc_library", "vc_plugin")
load(
    "//src/bzl/deps:repositories.bzl",
    "GRPC_JAVA_VERSION",
    "GRPC_KOTLIN_VERSION",
    "PROTOBUF_VERSION",
)
load(
    "//src/bzl/deps:repositories_extra.bzl",
    "IO_BITRISE_BITKOT_ARTIFACTS",
    "KOTLINX_COROUTINES_VERSION",
    "KOTLINX_SERIALIZATION_VERSION",
    "NETTY_VERSION",
    "OSHAI_KOTLIN_LOGGING_VERSION",
    "REACTOR_VERSION",
    "RSOCKET_VERSION",
)

copy_file(
    name = "bazel_remote",
    src = select({
        "@bazel_tools//src/conditions:linux_x86_64": "@bazel_remote_linux_x86_64//file",
        "@bazel_tools//src/conditions:linux_aarch64": "@bazel_remote_linux_arm64//file",
        "@bazel_tools//src/conditions:darwin_x86_64": "@bazel_remote_darwin_x86_64//file",
        "@bazel_tools//src/conditions:darwin_arm64": "@bazel_remote_darwin_arm64//file",
        "//conditions:default": None,
    }),
    out = "bazel_remote",
    is_executable = True,
    visibility = ["//visibility:public"],
)

_PROTOBUF_VERSION = "3.%s" % PROTOBUF_VERSION

_KOTLIN_VERSION = _kt_versions.KOTLIN_CURRENT_COMPILER_RELEASE.version

_GRADLE_DEPS = parse_deps_for_gradle(
    artifacts = IO_BITRISE_BITKOT_ARTIFACTS,
    libraries = {
        "grpc-protobuf": vc_library(
            module = "io.grpc:grpc-protobuf",
            version_ref = "grpc-java",
        ),
        "grpc-core": vc_library(
            module = "io.grpc:grpc-core",
            version_ref = "grpc-java",
        ),
        "grpc-netty": vc_library(
            module = "io.grpc:grpc-netty",
            version_ref = "grpc-java",
        ),
        "grpc-kotlin": vc_library(
            module = "io.grpc:grpc-kotlin-stub",
            version_ref = "grpc-kotlin",
        ),
        "protoc-compiler": vc_library(
            module = "com.google.protobuf:protoc",
            skip_dep = True,
            version_ref = "protobuf",
        ),
        "protoc-java": vc_library(
            module = "io.grpc:protoc-gen-grpc-java",
            skip_dep = True,
            version_ref = "grpc-java",
        ),
        "protoc-kotlin": vc_library(
            module = "io.grpc:protoc-gen-grpc-kotlin",
            skip_dep = True,
            version_ref = "grpc-kotlin",
        ),
        "protobuf-java": vc_library(
            module = "com.google.protobuf:protobuf-java",
            version_ref = "protobuf",
        ),
        "protobuf-kotlin": vc_library(
            module = "com.google.protobuf:protobuf-kotlin",
            version_ref = "protobuf",
        ),
        "kotlinx-coroutines": vc_library(
            module = "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8",
            version_ref = "kotlinx-coroutines",
        ),
        "kotlinx-serialization": vc_library(
            module = "org.jetbrains.kotlinx:kotlinx-serialization-core-jvm",
            version_ref = "kotlinx-serialization",
        ),
        "kotlinx-serialization-protobuf": vc_library(
            module = "org.jetbrains.kotlinx:kotlinx-serialization-protobuf",
            version_ref = "kotlinx-serialization",
        ),
        "rsocket-core": vc_library(
            module = "io.rsocket:rsocket-core",
            version_ref = "rsocket",
        ),
        "oshai-logging": vc_library(
            module = "io.github.oshai:kotlin-logging-jvm",
            version_ref = "oshai-logging",
        ),
    },
    plugins = {
        "kotlin-jvm": vc_plugin(
            id = "org.jetbrains.kotlin.jvm",
            version_ref = "kotlin",
        ),
        "kotlin-plugin-serialization": vc_plugin(
            id = "org.jetbrains.kotlin.plugin.serialization",
            version_ref = "kotlin",
        ),
        "protobuf": vc_plugin(
            id = "com.google.protobuf",
            version_ref = "protobuf-plugin",
        ),
    },
    versions = {
        "kotlin": _KOTLIN_VERSION,
        "grpc-java": GRPC_JAVA_VERSION,
        "grpc-kotlin": GRPC_KOTLIN_VERSION,
        "protobuf": _PROTOBUF_VERSION,
        "protobuf-plugin": "0.9.4",
        "netty": NETTY_VERSION,
        "kotlinx-coroutines": KOTLINX_COROUTINES_VERSION,
        "kotlinx-serialization": KOTLINX_SERIALIZATION_VERSION,
        "rsocket": RSOCKET_VERSION,
        "reactor": REACTOR_VERSION,
        "oshai-logging": OSHAI_KOTLIN_LOGGING_VERSION,
    },
)

write_file(
    name = "write_version_catalog",
    out = "libs.versions.toml",
    content = _GRADLE_DEPS.to_version_catalog(),
)

expand_template(
    name = "expand_build_gradle_kts_tpl",
    substitutions = {
        "%%plugins%%": _GRADLE_DEPS.to_plugins(),
        "%%libraries%%": _GRADLE_DEPS.to_libraries(),
        "%%artifacts%%": _GRADLE_DEPS.to_artifacts(),
    },
    template = "//src/conf:build.gradle.kt.tpl",
)

copy_protos(
    name = "copy_protos",
    include_external_repositories = [
        "com_github_bazelbuild_remote_apis",
        "googleapis",
    ],
    deps = [
        "//src/proto/kv_storage:kv_storage_proto",
        "@com_github_bazelbuild_remote_apis//build/bazel/remote/execution/v2:remote_execution_proto",
        "@googleapis//google/bytestream:bytestream_proto",
    ],
)

write_source_files(
    name = "write_gradle_configuration",
    files = {
        "build.gradle.kts": ":expand_build_gradle_kts_tpl",
        "gradlegen/proto": ":copy_protos",
        "gradlegen/libs.versions.toml": ":write_version_catalog",
    },
    tags = ["manual"],
)
